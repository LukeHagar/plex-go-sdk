// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetMediaProvidersRequest struct {
	// Plex Authentication Token
	XPlexToken string `queryParam:"style=form,explode=true,name=X-Plex-Token"`
}

func (o *GetMediaProvidersRequest) GetXPlexToken() string {
	if o == nil {
		return ""
	}
	return o.XPlexToken
}

type Pivot struct {
	ID      *string `json:"id,omitempty"`
	Key     *string `json:"key,omitempty"`
	Type    *string `json:"type,omitempty"`
	Title   *string `json:"title,omitempty"`
	Context *string `json:"context,omitempty"`
	Symbol  *string `json:"symbol,omitempty"`
}

func (o *Pivot) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Pivot) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Pivot) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Pivot) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Pivot) GetContext() *string {
	if o == nil {
		return nil
	}
	return o.Context
}

func (o *Pivot) GetSymbol() *string {
	if o == nil {
		return nil
	}
	return o.Symbol
}

type GetMediaProvidersDirectory struct {
	HubKey     *string `json:"hubKey,omitempty"`
	Title      *string `json:"title,omitempty"`
	Agent      *string `json:"agent,omitempty"`
	Language   *string `json:"language,omitempty"`
	Refreshing *bool   `json:"refreshing,omitempty"`
	Scanner    *string `json:"scanner,omitempty"`
	UUID       *string `json:"uuid,omitempty"`
	ID         *string `json:"id,omitempty"`
	Key        *string `json:"key,omitempty"`
	Type       *string `json:"type,omitempty"`
	Subtype    *string `json:"subtype,omitempty"`
	UpdatedAt  *int64  `json:"updatedAt,omitempty"`
	ScannedAt  *int64  `json:"scannedAt,omitempty"`
	Pivot      []Pivot `json:"Pivot,omitempty"`
}

func (o *GetMediaProvidersDirectory) GetHubKey() *string {
	if o == nil {
		return nil
	}
	return o.HubKey
}

func (o *GetMediaProvidersDirectory) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *GetMediaProvidersDirectory) GetAgent() *string {
	if o == nil {
		return nil
	}
	return o.Agent
}

func (o *GetMediaProvidersDirectory) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *GetMediaProvidersDirectory) GetRefreshing() *bool {
	if o == nil {
		return nil
	}
	return o.Refreshing
}

func (o *GetMediaProvidersDirectory) GetScanner() *string {
	if o == nil {
		return nil
	}
	return o.Scanner
}

func (o *GetMediaProvidersDirectory) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *GetMediaProvidersDirectory) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetMediaProvidersDirectory) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *GetMediaProvidersDirectory) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetMediaProvidersDirectory) GetSubtype() *string {
	if o == nil {
		return nil
	}
	return o.Subtype
}

func (o *GetMediaProvidersDirectory) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetMediaProvidersDirectory) GetScannedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.ScannedAt
}

func (o *GetMediaProvidersDirectory) GetPivot() []Pivot {
	if o == nil {
		return nil
	}
	return o.Pivot
}

type Action struct {
	ID  string `json:"id"`
	Key string `json:"key"`
}

func (o *Action) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Action) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

type Feature struct {
	Key           *string                      `json:"key,omitempty"`
	Type          string                       `json:"type"`
	Flavor        *string                      `json:"flavor,omitempty"`
	ScrobbleKey   *string                      `json:"scrobbleKey,omitempty"`
	UnscrobbleKey *string                      `json:"unscrobbleKey,omitempty"`
	Directory     []GetMediaProvidersDirectory `json:"Directory,omitempty"`
	Action        []Action                     `json:"Action,omitempty"`
}

func (o *Feature) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Feature) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *Feature) GetFlavor() *string {
	if o == nil {
		return nil
	}
	return o.Flavor
}

func (o *Feature) GetScrobbleKey() *string {
	if o == nil {
		return nil
	}
	return o.ScrobbleKey
}

func (o *Feature) GetUnscrobbleKey() *string {
	if o == nil {
		return nil
	}
	return o.UnscrobbleKey
}

func (o *Feature) GetDirectory() []GetMediaProvidersDirectory {
	if o == nil {
		return nil
	}
	return o.Directory
}

func (o *Feature) GetAction() []Action {
	if o == nil {
		return nil
	}
	return o.Action
}

type MediaProvider struct {
	Identifier *string   `json:"identifier,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Types      *string   `json:"types,omitempty"`
	Protocols  *string   `json:"protocols,omitempty"`
	Feature    []Feature `json:"Feature,omitempty"`
}

func (o *MediaProvider) GetIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *MediaProvider) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *MediaProvider) GetTypes() *string {
	if o == nil {
		return nil
	}
	return o.Types
}

func (o *MediaProvider) GetProtocols() *string {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *MediaProvider) GetFeature() []Feature {
	if o == nil {
		return nil
	}
	return o.Feature
}

type GetMediaProvidersMediaContainer struct {
	Size                          *int64          `json:"size,omitempty"`
	AllowCameraUpload             *bool           `json:"allowCameraUpload,omitempty"`
	AllowChannelAccess            *bool           `json:"allowChannelAccess,omitempty"`
	AllowSharing                  *bool           `json:"allowSharing,omitempty"`
	AllowSync                     *bool           `json:"allowSync,omitempty"`
	AllowTuners                   *bool           `json:"allowTuners,omitempty"`
	BackgroundProcessing          *bool           `json:"backgroundProcessing,omitempty"`
	Certificate                   *bool           `json:"certificate,omitempty"`
	CompanionProxy                *bool           `json:"companionProxy,omitempty"`
	CountryCode                   *string         `json:"countryCode,omitempty"`
	Diagnostics                   *string         `json:"diagnostics,omitempty"`
	EventStream                   *bool           `json:"eventStream,omitempty"`
	FriendlyName                  *string         `json:"friendlyName,omitempty"`
	Livetv                        *int64          `json:"livetv,omitempty"`
	MachineIdentifier             *string         `json:"machineIdentifier,omitempty"`
	MusicAnalysis                 *int64          `json:"musicAnalysis,omitempty"`
	MyPlex                        *bool           `json:"myPlex,omitempty"`
	MyPlexMappingState            *string         `json:"myPlexMappingState,omitempty"`
	MyPlexSigninState             *string         `json:"myPlexSigninState,omitempty"`
	MyPlexSubscription            *bool           `json:"myPlexSubscription,omitempty"`
	MyPlexUsername                *string         `json:"myPlexUsername,omitempty"`
	OfflineTranscode              *int64          `json:"offlineTranscode,omitempty"`
	OwnerFeatures                 *string         `json:"ownerFeatures,omitempty"`
	Platform                      *string         `json:"platform,omitempty"`
	PlatformVersion               *string         `json:"platformVersion,omitempty"`
	PluginHost                    *bool           `json:"pluginHost,omitempty"`
	PushNotifications             *bool           `json:"pushNotifications,omitempty"`
	ReadOnlyLibraries             *bool           `json:"readOnlyLibraries,omitempty"`
	StreamingBrainABRVersion      *int64          `json:"streamingBrainABRVersion,omitempty"`
	StreamingBrainVersion         *int64          `json:"streamingBrainVersion,omitempty"`
	Sync                          *bool           `json:"sync,omitempty"`
	TranscoderActiveVideoSessions *int64          `json:"transcoderActiveVideoSessions,omitempty"`
	TranscoderAudio               *bool           `json:"transcoderAudio,omitempty"`
	TranscoderLyrics              *bool           `json:"transcoderLyrics,omitempty"`
	TranscoderSubtitles           *bool           `json:"transcoderSubtitles,omitempty"`
	TranscoderVideo               *bool           `json:"transcoderVideo,omitempty"`
	TranscoderVideoBitrates       *string         `json:"transcoderVideoBitrates,omitempty"`
	TranscoderVideoQualities      *string         `json:"transcoderVideoQualities,omitempty"`
	TranscoderVideoResolutions    *string         `json:"transcoderVideoResolutions,omitempty"`
	UpdatedAt                     *int64          `json:"updatedAt,omitempty"`
	Updater                       *bool           `json:"updater,omitempty"`
	Version                       *string         `json:"version,omitempty"`
	VoiceSearch                   *bool           `json:"voiceSearch,omitempty"`
	MediaProvider                 []MediaProvider `json:"MediaProvider,omitempty"`
}

func (o *GetMediaProvidersMediaContainer) GetSize() *int64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetMediaProvidersMediaContainer) GetAllowCameraUpload() *bool {
	if o == nil {
		return nil
	}
	return o.AllowCameraUpload
}

func (o *GetMediaProvidersMediaContainer) GetAllowChannelAccess() *bool {
	if o == nil {
		return nil
	}
	return o.AllowChannelAccess
}

func (o *GetMediaProvidersMediaContainer) GetAllowSharing() *bool {
	if o == nil {
		return nil
	}
	return o.AllowSharing
}

func (o *GetMediaProvidersMediaContainer) GetAllowSync() *bool {
	if o == nil {
		return nil
	}
	return o.AllowSync
}

func (o *GetMediaProvidersMediaContainer) GetAllowTuners() *bool {
	if o == nil {
		return nil
	}
	return o.AllowTuners
}

func (o *GetMediaProvidersMediaContainer) GetBackgroundProcessing() *bool {
	if o == nil {
		return nil
	}
	return o.BackgroundProcessing
}

func (o *GetMediaProvidersMediaContainer) GetCertificate() *bool {
	if o == nil {
		return nil
	}
	return o.Certificate
}

func (o *GetMediaProvidersMediaContainer) GetCompanionProxy() *bool {
	if o == nil {
		return nil
	}
	return o.CompanionProxy
}

func (o *GetMediaProvidersMediaContainer) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *GetMediaProvidersMediaContainer) GetDiagnostics() *string {
	if o == nil {
		return nil
	}
	return o.Diagnostics
}

func (o *GetMediaProvidersMediaContainer) GetEventStream() *bool {
	if o == nil {
		return nil
	}
	return o.EventStream
}

func (o *GetMediaProvidersMediaContainer) GetFriendlyName() *string {
	if o == nil {
		return nil
	}
	return o.FriendlyName
}

func (o *GetMediaProvidersMediaContainer) GetLivetv() *int64 {
	if o == nil {
		return nil
	}
	return o.Livetv
}

func (o *GetMediaProvidersMediaContainer) GetMachineIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.MachineIdentifier
}

func (o *GetMediaProvidersMediaContainer) GetMusicAnalysis() *int64 {
	if o == nil {
		return nil
	}
	return o.MusicAnalysis
}

func (o *GetMediaProvidersMediaContainer) GetMyPlex() *bool {
	if o == nil {
		return nil
	}
	return o.MyPlex
}

func (o *GetMediaProvidersMediaContainer) GetMyPlexMappingState() *string {
	if o == nil {
		return nil
	}
	return o.MyPlexMappingState
}

func (o *GetMediaProvidersMediaContainer) GetMyPlexSigninState() *string {
	if o == nil {
		return nil
	}
	return o.MyPlexSigninState
}

func (o *GetMediaProvidersMediaContainer) GetMyPlexSubscription() *bool {
	if o == nil {
		return nil
	}
	return o.MyPlexSubscription
}

func (o *GetMediaProvidersMediaContainer) GetMyPlexUsername() *string {
	if o == nil {
		return nil
	}
	return o.MyPlexUsername
}

func (o *GetMediaProvidersMediaContainer) GetOfflineTranscode() *int64 {
	if o == nil {
		return nil
	}
	return o.OfflineTranscode
}

func (o *GetMediaProvidersMediaContainer) GetOwnerFeatures() *string {
	if o == nil {
		return nil
	}
	return o.OwnerFeatures
}

func (o *GetMediaProvidersMediaContainer) GetPlatform() *string {
	if o == nil {
		return nil
	}
	return o.Platform
}

func (o *GetMediaProvidersMediaContainer) GetPlatformVersion() *string {
	if o == nil {
		return nil
	}
	return o.PlatformVersion
}

func (o *GetMediaProvidersMediaContainer) GetPluginHost() *bool {
	if o == nil {
		return nil
	}
	return o.PluginHost
}

func (o *GetMediaProvidersMediaContainer) GetPushNotifications() *bool {
	if o == nil {
		return nil
	}
	return o.PushNotifications
}

func (o *GetMediaProvidersMediaContainer) GetReadOnlyLibraries() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnlyLibraries
}

func (o *GetMediaProvidersMediaContainer) GetStreamingBrainABRVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.StreamingBrainABRVersion
}

func (o *GetMediaProvidersMediaContainer) GetStreamingBrainVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.StreamingBrainVersion
}

func (o *GetMediaProvidersMediaContainer) GetSync() *bool {
	if o == nil {
		return nil
	}
	return o.Sync
}

func (o *GetMediaProvidersMediaContainer) GetTranscoderActiveVideoSessions() *int64 {
	if o == nil {
		return nil
	}
	return o.TranscoderActiveVideoSessions
}

func (o *GetMediaProvidersMediaContainer) GetTranscoderAudio() *bool {
	if o == nil {
		return nil
	}
	return o.TranscoderAudio
}

func (o *GetMediaProvidersMediaContainer) GetTranscoderLyrics() *bool {
	if o == nil {
		return nil
	}
	return o.TranscoderLyrics
}

func (o *GetMediaProvidersMediaContainer) GetTranscoderSubtitles() *bool {
	if o == nil {
		return nil
	}
	return o.TranscoderSubtitles
}

func (o *GetMediaProvidersMediaContainer) GetTranscoderVideo() *bool {
	if o == nil {
		return nil
	}
	return o.TranscoderVideo
}

func (o *GetMediaProvidersMediaContainer) GetTranscoderVideoBitrates() *string {
	if o == nil {
		return nil
	}
	return o.TranscoderVideoBitrates
}

func (o *GetMediaProvidersMediaContainer) GetTranscoderVideoQualities() *string {
	if o == nil {
		return nil
	}
	return o.TranscoderVideoQualities
}

func (o *GetMediaProvidersMediaContainer) GetTranscoderVideoResolutions() *string {
	if o == nil {
		return nil
	}
	return o.TranscoderVideoResolutions
}

func (o *GetMediaProvidersMediaContainer) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetMediaProvidersMediaContainer) GetUpdater() *bool {
	if o == nil {
		return nil
	}
	return o.Updater
}

func (o *GetMediaProvidersMediaContainer) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

func (o *GetMediaProvidersMediaContainer) GetVoiceSearch() *bool {
	if o == nil {
		return nil
	}
	return o.VoiceSearch
}

func (o *GetMediaProvidersMediaContainer) GetMediaProvider() []MediaProvider {
	if o == nil {
		return nil
	}
	return o.MediaProvider
}

// GetMediaProvidersResponseBody - Media providers and their features
type GetMediaProvidersResponseBody struct {
	MediaContainer *GetMediaProvidersMediaContainer `json:"MediaContainer,omitempty"`
}

func (o *GetMediaProvidersResponseBody) GetMediaContainer() *GetMediaProvidersMediaContainer {
	if o == nil {
		return nil
	}
	return o.MediaContainer
}

type GetMediaProvidersResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Media providers and their features
	Object *GetMediaProvidersResponseBody
}

func (o *GetMediaProvidersResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetMediaProvidersResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetMediaProvidersResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetMediaProvidersResponse) GetObject() *GetMediaProvidersResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
